[virtualbox]
mode = headless
path = /usr/bin/VBoxManage
interface = vboxnet0

machines={% for n in range(1,salt['pillar.get']('vmcloak:count')+1) -%} cuckoo{{n}}, {%- endfor %}

{% for n in range(1, salt['pillar.get']('vmcloak:count')+1)  %}
[{{ salt['pillar.get']('vmcloak:basename') }}{{n}}]
label = {{ salt['pillar.get']('vmcloak:basename') }}{{n}}
platform = windows
ip = {{ salt['pillar.get']('vmcloak:ipprefix') }}{{ salt['pillar.get']('vmcloak:ipstart')|int + n }}
snapshot = vmcloak
interface = vboxnet0
resultserver_ip = {{ salt['pillar.get']('vmcloak:resultserver_ip') }}
tags = {{ salt['pillar.get']('vmcloak:tags') }}
{% endfor %}

[honeyd]
# For more information on this VM please refer to the "services" section of
# the conf/auxiliary.conf configuration file. This machine is a bit special
# in the way that its used as an additional VM for an analysis.
# *NOTE* that if this functionality is used, the VM should be registered in
# the "machines" list in the beginning of this file.
label = honeyd
platform = linux
ip = 192.168.56.102
# The tags should at least contain "service" and the name of this service.
# This way the services auxiliary module knows how to find this particular VM.
tags = service, honeyd
# Not all services actually have a Cuckoo Agent running in the VM, for those
# services one can specify the "noagent" option so Cuckoo will just wait until
# the end of the analysis instead of trying to connect to the non-existing
# Cuckoo Agent. We can't really intercept any inter-VM communication from the
# host / gateway so in order to dump traffic between VMs we have to use a
# different network dumping approach. For this machine we use the "nictrace"
# functionality from VirtualBox (which is basically their internal tcpdump)
# and thus properly dumps inter-VM traffic.
options = nictrace noagen,cuckoo11,cuckoo12t
